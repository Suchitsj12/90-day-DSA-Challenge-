1)  
Sort An Array of 0s, 1s and 2s
https://www.codingninjas.com/studio/problems/sort-an-array-of-0s-1s-and-2s_892977?utm_source=youtube&utm_medium=affiliate&utm_campaign=striver_Arrayproblems&leftPanelTabValue=PROBLEM


// by making count of 0,1,2

#include <bits/stdc++.h> 
void sortArray(vector<int>& arr, int n)
{
    // Write your code here
    int cnt0=0,cnt1=0,cnt2=0;
    vector<int>num;
    for(int i=0;i<n;i++){
        if(arr[i]==0)cnt0++;
        else if(arr[i]==1)cnt1++;
        else if(arr[i]==2)cnt2++;
    }
    for(int i=0;i<cnt0;i++){
        num.push_back(0);
    }   
    for(int i=cnt0;i<cnt0+cnt1;i++){
        num.push_back(1);
    }
    for(int i=cnt0+cnt1;i<n;i++){
        num.push_back(2);
    }
    for(int i=0;i<n;i++){
        arr[i]=num[i];
    }
    // return num;
}
//deutch national bank approach 

class Solution {
public:
    void sortColors(vector<int>& nums) {
        int n=nums.size();
        int mid=0,low=0,high=n-1;
        while(mid<=high){
            if(nums[mid]==0){
                swap(nums[low],nums[mid]);
                mid++;
                low++;

            }

            else if(nums[mid]==1){
                mid++;

            }

            else{
            
                swap(nums[high],nums[mid]);
                // mid++;/
                high--;          
            }
       }
        
    }
};

*****************************************************************************************************************************

2)
Majority Element
https://leetcode.com/problems/majority-element/description/

brute force 
class Solution {
public:
    int majorityElement(vector<int>& nums) {
        
        int n=nums.size();
        for(int i=0;i<n;i++){
            int cnt=0;
            for(int j=0;j<n;j++){
                if(nums[i]==nums[j]){
                    cnt++;
                }
                if(cnt>n/2){
                    return nums[i];
                }
            }
        }
        return -1;
    }
};


// by hash map

class Solution {
public:
    int majorityElement(vector<int>& nums) {

        map<int,int>mpp;
        int n=nums.size();
        for(int i=0;i<n;i++){
            mpp[nums[i]]++;
        }
        for(auto it:mpp){
            if(it.second>n/2) return it.first;
        }
        return

        
    }
};



*****************************************************************************************************************************










