1)
Longest Consecutive Sequence
https://leetcode.com/problems/longest-consecutive-sequence/
class Solution {
public:
    int longestConsecutive(vector<int>& nums) {
        if(nums.size()==0) return 0;
        int n=nums.size();
        int cnt=1;
        int longest=1;
        int lastSmaller=INT_MIN;
        sort(nums.begin(),nums.end());
        for(int i=0;i<n;i++){
            if(nums[i]-1==lastSmaller){
                cnt++;
                lastSmaller=nums[i];
            }
            if(nums[i]!=lastSmaller){
                cnt=1;lastSmaller=nums[i];
            }
            longest=max(cnt,longest);             
        }

        return longest;
        
    }
};

optimal approach :-

class Solution {
public:
    int longestConsecutive(vector<int>& nums) {
        int n=nums.size();
        if(n==0) return 0;
        int longest=1;
        unordered_set<int>st;
        for(int i=0;i<n;i++){
            st.insert(nums[i]);
        }
        for(auto it:st){
            if(st.find(it-1)==st.end()){
                int cnt=1;
                int x=it;
                while(st.find(x+1)!=st.end()){
                    x=x+1;
                    cnt+=1;
                }
                longest=max(cnt,longest);
            }
            
        }


        return longest;
    }
};


*****************************************************************************************************************************



