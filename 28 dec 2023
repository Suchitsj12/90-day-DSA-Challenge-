1) 
Linear Search
https://www.codingninjas.com/studio/problems/linear-search_6922070?utm_source=youtube&utm_medium=affiliate&utm_campaign=striver_Arrayproblems&leftPanelTabValue=PROBLEM

int linearSearch(int n, int num, vector<int> &arr)
{
    // Write your code here.
    // int m =arr.size();
    for(int i=0;i<n;i++){
        if(arr[i]==num) return i;
        // else return -1;
    }
    return -1;
}

*****************************************************************************************************************************

2)
 Merge 2 Sorted Array

 https://www.codingninjas.com/studio/problems/sorted-array_6613259?utm_source=youtube&utm_medium=affiliate&utm_campaign=striver_Arrayproblems&leftPanelTabValue=PROBLEM

 #include<bits/stdc++.h>
vector < int > sortedArray(vector < int > a, vector < int > b) {
    // Write your code here
    int n1=a.size();
    int n2=b.size();
    set<int>st;
    for(int i=0;i<n1;i++){
        st.insert(a[i]);
    }
    for(int i=0;i<n2;i++){
        st.insert(b[i]);
    }
    vector<int>temp;
    for(auto it:st){
        temp.push_back(it);
    }
    return temp;
}


// optimal solution 

vector < int > sortedArray(vector < int > a, vector < int > b) {
    int n1=a.size();
    int n2=b.size();
    int i=0;
    int j=0;
    vector<int>unionarr;
    while(i<n1&&j<n2){
        if(a[i]<=b[j]){
            if(unionarr.empty()||a[i]!=unionarr.back()){
                unionarr.push_back(a[i]);
            }
            i++;
        }
        else{
            if(unionarr.empty()||b[j]!=unionarr.back()){
                unionarr.push_back(b[j]);
            }
            j++;
        }
    }
    while(i<n1){
        if (unionarr.empty()||a[i]!=unionarr.back()) {
    
            unionarr.push_back(a[i]);
        }
        i++;
    }
    while(j<n2){
        if(unionarr.empty()||b[j]!=unionarr.back()){
            unionarr.push_back(b[j]);
        }
        j++;

    }
    return unionarr;
}


*****************************************************************************************************************************

3) 

