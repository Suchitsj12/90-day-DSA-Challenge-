1) Missing Number
https://www.codingninjas.com/studio/problems/missing-number_6680467?utm_source=youtube&utm_medium=affiliate&utm_campaign=striver_Arrayproblems&leftPanelTabValue=PROBLEM
//brute force
int missingNumber(vector<int>&a, int N) {
    // Write your code here.
    for(int i=1;i<=N;i++){
        int flag=0;
        for(int j=0;j<=N-1;j++){
            if(a[j]==i){
                flag=1;
                break;
            }
        }
        if (flag == 0) {
            return i;
        }
    }
    return -1;
}

// by hashing method 

int missingNumber(vector<int>&a, int N) {
    // Write your code here.
    int hash[N+1]={0};
    for(int i=0;i<N-1;i++){
        hash[a[i]]=1;
    }
    for(int i=1;i<=N;i++){
        if(hash[i]==0){
            return i;
        }
    }
    return -1;
}

//by summing method

int missingNumber(vector<int>&a, int n) {
    // Write your code here.
    int sum1=n*(n+1)/2;
    int sum2=0;
    for(int i=0;i<n-1;i++){
        sum2+=a[i];
    }
    int missing_number=sum1-sum2;
    return missing_number;
}


//optimizing with xor 

int missingNumber(vector<int>&a, int N) {
    // Write your code here.
    int xor_sum=0;
    for(int i=1;i<=N;i++){
        xor_sum^=i;
    }
    for(int i=0;i<N-1;i++){
        xor_sum^=a[i];
    }
    return xor_sum;
}


// more optimal one 

int missingNumber(vector<int>&a, int N) {
    // Write your code here.
    int xor1=0,xor2=0;
    for(int i=0;i<N-1;i++){
        xor1=xor1^a[i];
        xor2=xor2^(i+1);
    }
    xor2=xor2^N;
    return xor1^xor2;
}

*****************************************************************************************************************************

2)  Max Consecutive Ones

https://leetcode.com/problems/max-consecutive-ones/

class Solution {
public:
    int findMaxConsecutiveOnes(vector<int>& nums) {

        int maxi=0;
        int count=0;
        for(int i=0;i<nums.size();i++){
            if(nums[i]==1){
                count++;
                maxi=max(maxi,count);
            }
            else{
                count=0;
            }
        }
        return maxi;
        
    }
};


*****************************************************************************************************************************




